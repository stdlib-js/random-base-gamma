{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/gamma.js","../lib/factory.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isPositive } from '@stdlib/assert-is-positive-number' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\n\n\n// MAIN //\n\n/**\n* Validates parameters.\n*\n* @private\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 1.0, 2.0 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( alpha, beta ) {\n\tif ( !isPositive( alpha ) ) {\n\t\treturn new TypeError( format( '0P47P', alpha ) );\n\t}\n\tif ( !isPositive( beta ) ) {\n\t\treturn new TypeError( format( '0P47T', beta ) );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ln from '@stdlib/math-base-special-ln' ;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a gamma distribution.\n*\n* @private\n* @param {PRNG} randu - PRNG for uniformly distributed numbers\n* @param {PRNG} randn - PRNG for standard normally distributed numbers\n* @param {PositiveNumber} beta - rate parameter\n* @param {PositiveNumber} d - `alpha + 2/3` or `alpha - 1/3`\n* @param {PositiveNumber} c - `1.0 / sqrt( 9.0*d )`\n* @returns {PositiveNumber} pseudorandom number\n*/\nfunction gamma( randu, randn, beta, d, c ) {\n\tvar flg;\n\tvar x2;\n\tvar v0;\n\tvar v1;\n\tvar x;\n\tvar u;\n\tvar v;\n\n\tflg = true;\n\twhile ( flg ) {\n\t\tdo {\n\t\t\tx = randn();\n\t\t\tv = 1.0 + (c*x);\n\t\t} while ( v <= 0.0 );\n\t\tv *= v * v;\n\t\tx2 = x * x;\n\t\tv0 = 1.0 - (0.331*x2*x2);\n\t\tv1 = (0.5*x2) + (d*( 1.0-v+ln(v) ));\n\t\tu = randu();\n\t\tif ( u < v0 || ln( u ) < v1 ) {\n\t\t\tflg = false;\n\t\t}\n\t}\n\treturn (1.0/beta) * d * v;\n}\n\n\n// EXPORTS //\n\nexport default gamma;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor' ;\nimport setReadWriteAccessor from '@stdlib/utils-define-nonenumerable-read-write-accessor' ;\nimport isObject from '@stdlib/assert-is-plain-object' ;\nimport isUint32Array from '@stdlib/assert-is-uint32array' ;\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean' ;\nimport isFunction from '@stdlib/assert-is-function' ;\nimport hasOwnProp from '@stdlib/assert-has-own-property' ;\nimport constantFunction from '@stdlib/utils-constant-function' ;\nimport noop from '@stdlib/utils-noop' ;\nimport { factory as randn } from '@stdlib/random-base-improved-ziggurat' ;\nimport { factory as randu } from '@stdlib/random-base-mt19937' ;\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport sqrt from '@stdlib/math-base-special-sqrt' ;\nimport pow from '@stdlib/math-base-special-pow' ;\nimport gcopy from '@stdlib/blas-base-gcopy' ;\nimport Uint32Array from '@stdlib/array-uint32' ;\nimport typedarray2json from '@stdlib/array-to-json' ;\nimport copy from '@stdlib/utils-copy' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\nimport validate from './validate.js' ;\nimport gamma0 from './gamma.js' ;\n\n\n// VARIABLES //\n\nvar ONE_THIRD = 1.0 / 3.0;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating gamma distributed random numbers.\n*\n* @param {PositiveNumber} [alpha] - shape parameter\n* @param {PositiveNumber} [beta] - rate parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var gamma = factory( 2.0, 1.0 );\n* var v = gamma();\n* // returns <number>\n*\n* @example\n* var gamma = factory( 2.0, 2.0, {\n*     'seed': 297\n* });\n* var v = gamma();\n* // returns <number>\n*/\nfunction factory() {\n\tvar STATE;\n\tvar alpha;\n\tvar rnorm;\n\tvar beta;\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar FLG;\n\tvar err;\n\tvar c;\n\tvar d;\n\n\tFLG = true;\n\tif ( arguments.length === 0 ) {\n\t\topts = {\n\t\t\t'copy': false\n\t\t};\n\t\trand = randu( opts );\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( '0P42h', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'copy' ) && !isBoolean( opts.copy ) ) {\n\t\t\tthrow new TypeError( format( '0P430', 'copy', opts.copy ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( '0P47M', 'prng', opts.prng ) );\n\t\t\t}\n\t\t\trand = opts.prng;\n\t\t} else {\n\t\t\tif ( hasOwnProp( opts, 'state' ) && !isUint32Array( opts.state ) ) {\n\t\t\t\tthrow new TypeError( format( '0P47I', 'state', opts.state ) );\n\t\t\t}\n\t\t\topts = copy( opts, 1 );\n\t\t\tif ( opts.copy === false ) {\n\t\t\t\tFLG = false;\n\t\t\t} else if ( opts.state ) {\n\t\t\t\topts.state = gcopy( opts.state.length, opts.state, 1, new Uint32Array( opts.state.length ), 1 ); // eslint-disable-line max-len\n\t\t\t}\n\t\t\topts.copy = false;\n\t\t\trand = randu( opts );\n\t\t}\n\t} else {\n\t\talpha = arguments[ 0 ];\n\t\tbeta = arguments[ 1 ];\n\t\terr = validate( alpha, beta );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = arguments[ 2 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( '0P42h', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'copy' ) && !isBoolean( opts.copy ) ) {\n\t\t\t\tthrow new TypeError( format( '0P430', 'copy', opts.copy ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( '0P47M', 'prng', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trand = opts.prng;\n\t\t\t} else {\n\t\t\t\tif ( hasOwnProp( opts, 'state' ) && !isUint32Array( opts.state ) ) {\n\t\t\t\t\tthrow new TypeError( format( '0P47I', 'state', opts.state ) );\n\t\t\t\t}\n\t\t\t\topts = copy( opts, 1 );\n\t\t\t\tif ( opts.copy === false ) {\n\t\t\t\t\tFLG = false;\n\t\t\t\t} else if ( opts.state ) {\n\t\t\t\t\topts.state = gcopy( opts.state.length, opts.state, 1, new Uint32Array( opts.state.length ), 1 ); // eslint-disable-line max-len\n\t\t\t\t}\n\t\t\t\topts.copy = false;\n\t\t\t\trand = randu( opts );\n\t\t\t}\n\t\t} else {\n\t\t\topts = {\n\t\t\t\t'copy': false\n\t\t\t};\n\t\t\trand = randu( opts );\n\t\t}\n\t}\n\tif ( opts && opts.prng ) {\n\t\trnorm = randn({\n\t\t\t'prng': opts.prng\n\t\t});\n\t} else {\n\t\tif ( opts.state ) {\n\t\t\tSTATE = opts.state;\n\t\t} else {\n\t\t\tSTATE = rand.state;\n\t\t\trand.state = STATE; // updates the underlying PRNG to point to a shared state\n\t\t}\n\t\trnorm = randn({\n\t\t\t'state': STATE,\n\t\t\t'copy': false\n\t\t});\n\t}\n\tif ( alpha === void 0 ) {\n\t\tprng = gamma2;\n\t} else {\n\t\tif ( alpha >= 1.0 ) {\n\t\t\tprng = gamma1a;\n\t\t\td = alpha - ONE_THIRD;\n\t\t} else {\n\t\t\tprng = gamma1b;\n\t\t\td = alpha + 1.0 - ONE_THIRD;\n\t\t}\n\t\tc = 1.0 / sqrt( 9.0*d );\n\t}\n\tsetReadOnly( prng, 'NAME', 'gamma' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t\trand = rand.normalized;\n\t}\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {TypeError} must provide a `Uint32Array`\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\tif ( !isUint32Array( s ) ) {\n\t\t\tthrow new TypeError( format( '0P47J', s ) );\n\t\t}\n\t\tif ( FLG ) {\n\t\t\ts = gcopy( s.length, s, 1, new Uint32Array( s.length ), 1 );\n\t\t}\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( alpha === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ alpha, beta ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a gamma distribution with bound parameters when `alpha >= 1`.\n\t*\n\t* @private\n\t* @returns {PositiveNumber} pseudorandom number\n\t*\n\t* @example\n\t* var v = gamma1a();\n\t* // returns <number>\n\t*/\n\tfunction gamma1a() {\n\t\treturn gamma0( rand, rnorm, beta, d, c );\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a gamma distribution with bound parameters when `alpha < 1`.\n\t*\n\t* @private\n\t* @returns {PositiveNumber} pseudorandom number\n\t*\n\t* @example\n\t* var v = gamma1b();\n\t* // returns <number>\n\t*/\n\tfunction gamma1b() {\n\t\treturn gamma0( rand, rnorm, beta, d, c ) * pow( rand(), 1.0/alpha );\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a gamma distribution.\n\t*\n\t* @private\n\t* @param {PositiveNumber} alpha - shape parameter\n\t* @param {PositiveNumber} beta - rate parameter\n\t* @returns {PositiveNumber} pseudorandom number\n\t*\n\t* @example\n\t* var v = gamma2( 2.0, 4.0 );\n\t* // returns <number>\n\t*\n\t* @example\n\t* var v = gamma2( 3.0, 0.0 );\n\t* // returns NaN\n\t*\n\t* @example\n\t* var v = gamma2( 0.0, 2.0 );\n\t* // returns NaN\n\t*\n\t* @example\n\t* var v = gamma2( NaN, NaN );\n\t* // returns NaN\n\t*/\n\tfunction gamma2( alpha, beta ) {\n\t\tvar c;\n\t\tvar d;\n\t\tif (\n\t\t\tisnan( alpha ) ||\n\t\t\tisnan( beta ) ||\n\t\t\talpha <= 0.0 ||\n\t\t\tbeta <= 0.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( alpha < 1.0 ) {\n\t\t\td = alpha + 1.0 - ONE_THIRD;\n\t\t\tc = 1.0 / sqrt( 9.0*d );\n\t\t\treturn gamma0( rand, rnorm, beta, d, c ) * pow( rand(), 1.0/alpha );\n\t\t}\n\t\td = alpha - ONE_THIRD;\n\t\tc = 1.0 / sqrt( 9.0*d );\n\t\treturn gamma0( rand, rnorm, beta, d, c );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport factory from './factory.js' ;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a gamma distribution.\n*\n* ## References\n*\n* -   Marsaglia, George, and Wai Wan Tsang. 2000. \"A Simple Method for Generating Gamma Variables.\" _ACM Transactions on Mathematical Software_ 26 (3). New York, NY, USA: ACM: 363–72. doi:[10.1145/358407.358414](http://dx.doi.org/10.1145/358407.358414).\n*\n*\n* @name gamma\n* @type {PRNG}\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @returns {PositiveNumber} pseudorandom number\n*\n* @example\n* var v = gamma( 2.0, 4.0 );\n* // returns <number>\n*\n* @example\n* var v = gamma( -2.0, 4.0 );\n* // returns NaN\n*/\nvar gamma = factory();\n\n\n// EXPORTS //\n\nexport default gamma;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Gamma distributed pseudorandom numbers.\n*\n* @module @stdlib/random-base-gamma\n*\n* @example\n* import gamma from '@stdlib/random-base-gamma' ;\n*\n* var v = gamma( 2.0, 3.0 );\n* // returns <number>\n*\n* @example\n* import { factory as factory } from '@stdlib/random-base-gamma' ;\n*\n* var gamma = factory( 3.0, 2.0, {\n*     'seed': 297\n* });\n*\n* var v = gamma();\n* // returns <number>\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport gamma from './main.js' ;\nimport factory from './factory.js' ;\n\n\n// MAIN //\n\nsetReadOnly( gamma, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default gamma;\n"],"names":["validate","alpha","beta","isPositive","TypeError","format","gamma","randu","randn","d","c","flg","x2","v0","v1","x","u","v","ln","ONE_THIRD","factory","STATE","rnorm","opts","rand","prng","FLG","err","arguments","length","copy","isObject","hasOwnProp","isBoolean","isFunction","isUint32Array","state","gcopy","Uint32Array","gamma2","gamma1a","gamma1b","sqrt","setReadOnly","setReadWriteAccessor","constantFunction","noop","setReadOnlyAccessor","getSeed","getSeedLength","getState","setState","getStateLength","getStateSize","toJSON","normalized","seed","seedLength","stateLength","byteLength","s","out","name","NAME","typedarray2json","params","gamma0","pow","isnan","NaN"],"mappings":"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"}