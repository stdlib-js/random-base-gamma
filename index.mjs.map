{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/gamma.js","../lib/factory.js","../lib/index.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositive = require( '@stdlib/assert-is-positive-number' ).isPrimitive;\n\n\n// MAIN //\n\n/**\n* Validates parameters.\n*\n* @private\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 1.0, 2.0 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( alpha, beta ) {\n\tif ( !isPositive( alpha ) ) {\n\t\treturn new TypeError( 'invalid argument. `alpha` must be a positive number. Value: `' + alpha + '`.' );\n\t}\n\tif ( !isPositive( beta ) ) {\n\t\treturn new TypeError( 'invalid argument. `beta` must be a positive number. Value: `' + beta + '`.' );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ln = require( '@stdlib/math-base-special-ln' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a gamma distribution.\n*\n* @private\n* @param {PRNG} randu - PRNG for uniformly distributed numbers\n* @param {PRNG} randn - PRNG for standard normally distributed numbers\n* @param {PositiveNumber} beta - rate parameter\n* @param {PositiveNumber} d - `alpha + 2/3` or `alpha - 1/3`\n* @param {PositiveNumber} c - `1.0 / sqrt( 9.0*d )`\n* @returns {PositiveNumber} pseudorandom number\n*/\nfunction gamma( randu, randn, beta, d, c ) {\n\tvar flg;\n\tvar x2;\n\tvar v0;\n\tvar v1;\n\tvar x;\n\tvar u;\n\tvar v;\n\n\tflg = true;\n\twhile ( flg ) {\n\t\tdo {\n\t\t\tx = randn();\n\t\t\tv = 1.0 + (c*x);\n\t\t} while ( v <= 0.0 );\n\t\tv *= v * v;\n\t\tx2 = x * x;\n\t\tv0 = 1.0 - (0.331*x2*x2);\n\t\tv1 = (0.5*x2) + (d*( 1.0-v+ln(v) ));\n\t\tu = randu();\n\t\tif ( u < v0 || ln( u ) < v1 ) {\n\t\t\tflg = false;\n\t\t}\n\t}\n\treturn (1.0/beta) * d * v;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gamma;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils-define-nonenumerable-read-write-accessor' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isUint32Array = require( '@stdlib/assert-is-uint32array' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar constantFunction = require( '@stdlib/utils-constant-function' );\nvar noop = require( '@stdlib/utils-noop' );\nvar randn = require( '@stdlib/random-base-improved-ziggurat' ).factory;\nvar randu = require( '@stdlib/random-base-mt19937' ).factory;\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\nvar pow = require( '@stdlib/math-base-special-pow' );\nvar gcopy = require( '@stdlib/blas-base-gcopy' );\nvar Uint32Array = require( '@stdlib/array-uint32' );\nvar typedarray2json = require( '@stdlib/array-to-json' );\nvar copy = require( '@stdlib/utils-copy' );\nvar format = require( '@stdlib/string-format' );\nvar validate = require( './validate.js' );\nvar gamma0 = require( './gamma.js' );\n\n\n// VARIABLES //\n\nvar ONE_THIRD = 1.0 / 3.0;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating gamma distributed random numbers.\n*\n* @param {PositiveNumber} [alpha] - shape parameter\n* @param {PositiveNumber} [beta] - rate parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var gamma = factory( 2.0, 1.0 );\n* var v = gamma();\n* // returns <number>\n*\n* @example\n* var gamma = factory( 2.0, 2.0, {\n*     'seed': 297\n* });\n* var v = gamma();\n* // returns <number>\n*/\nfunction factory() {\n\tvar STATE;\n\tvar alpha;\n\tvar rnorm;\n\tvar beta;\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar FLG;\n\tvar err;\n\tvar c;\n\tvar d;\n\n\tFLG = true;\n\tif ( arguments.length === 0 ) {\n\t\topts = {\n\t\t\t'copy': false\n\t\t};\n\t\trand = randu( opts );\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'copy' ) && !isBoolean( opts.copy ) ) {\n\t\t\tthrow new TypeError( 'invalid option. `copy` option must be a boolean. Option: `' + opts.copy + '`.' );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `%s`.', opts.prng ) );\n\t\t\t}\n\t\t\trand = opts.prng;\n\t\t} else {\n\t\t\tif ( hasOwnProp( opts, 'state' ) && !isUint32Array( opts.state ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `state` option must be a Uint32Array. Option: `' + opts.state + '`.' );\n\t\t\t}\n\t\t\topts = copy( opts, 1 );\n\t\t\tif ( opts.copy === false ) {\n\t\t\t\tFLG = false;\n\t\t\t} else if ( opts.state ) {\n\t\t\t\topts.state = gcopy( opts.state.length, opts.state, 1, new Uint32Array( opts.state.length ), 1 ); // eslint-disable-line max-len\n\t\t\t}\n\t\t\topts.copy = false;\n\t\t\trand = randu( opts );\n\t\t}\n\t} else {\n\t\talpha = arguments[ 0 ];\n\t\tbeta = arguments[ 1 ];\n\t\terr = validate( alpha, beta );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = arguments[ 2 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'copy' ) && !isBoolean( opts.copy ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `copy` option must be a boolean. Option: `' + opts.copy + '`.' );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `%s`.', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trand = opts.prng;\n\t\t\t} else {\n\t\t\t\tif ( hasOwnProp( opts, 'state' ) && !isUint32Array( opts.state ) ) {\n\t\t\t\t\tthrow new TypeError( 'invalid option. `state` option must be a Uint32Array. Option: `' + opts.state + '`.' );\n\t\t\t\t}\n\t\t\t\topts = copy( opts, 1 );\n\t\t\t\tif ( opts.copy === false ) {\n\t\t\t\t\tFLG = false;\n\t\t\t\t} else if ( opts.state ) {\n\t\t\t\t\topts.state = gcopy( opts.state.length, opts.state, 1, new Uint32Array( opts.state.length ), 1 ); // eslint-disable-line max-len\n\t\t\t\t}\n\t\t\t\topts.copy = false;\n\t\t\t\trand = randu( opts );\n\t\t\t}\n\t\t} else {\n\t\t\topts = {\n\t\t\t\t'copy': false\n\t\t\t};\n\t\t\trand = randu( opts );\n\t\t}\n\t}\n\tif ( opts && opts.prng ) {\n\t\trnorm = randn({\n\t\t\t'prng': opts.prng\n\t\t});\n\t} else {\n\t\tif ( opts.state ) {\n\t\t\tSTATE = opts.state;\n\t\t} else {\n\t\t\tSTATE = rand.state;\n\t\t\trand.state = STATE; // updates the underlying PRNG to point to a shared state\n\t\t}\n\t\trnorm = randn({\n\t\t\t'state': STATE,\n\t\t\t'copy': false\n\t\t});\n\t}\n\tif ( alpha === void 0 ) {\n\t\tprng = gamma2;\n\t} else {\n\t\tif ( alpha >= 1.0 ) {\n\t\t\tprng = gamma1a;\n\t\t\td = alpha - ONE_THIRD;\n\t\t} else {\n\t\t\tprng = gamma1b;\n\t\t\td = alpha + 1.0 - ONE_THIRD;\n\t\t}\n\t\tc = 1.0 / sqrt( 9.0*d );\n\t}\n\tsetReadOnly( prng, 'NAME', 'gamma' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t\trand = rand.normalized;\n\t}\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {TypeError} must provide a `Uint32Array`\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\tif ( !isUint32Array( s ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Must provide a Uint32Array. Value: `' + s + '`.' );\n\t\t}\n\t\tif ( FLG ) {\n\t\t\ts = gcopy( s.length, s, 1, new Uint32Array( s.length ), 1 );\n\t\t}\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( alpha === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ alpha, beta ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a gamma distribution with bound parameters when `alpha >= 1`.\n\t*\n\t* @private\n\t* @returns {PositiveNumber} pseudorandom number\n\t*\n\t* @example\n\t* var v = gamma1a();\n\t* // returns <number>\n\t*/\n\tfunction gamma1a() {\n\t\treturn gamma0( rand, rnorm, beta, d, c );\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a gamma distribution with bound parameters when `alpha < 1`.\n\t*\n\t* @private\n\t* @returns {PositiveNumber} pseudorandom number\n\t*\n\t* @example\n\t* var v = gamma1b();\n\t* // returns <number>\n\t*/\n\tfunction gamma1b() {\n\t\treturn gamma0( rand, rnorm, beta, d, c ) * pow( rand(), 1.0/alpha );\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a gamma distribution.\n\t*\n\t* @private\n\t* @param {PositiveNumber} alpha - shape parameter\n\t* @param {PositiveNumber} beta - rate parameter\n\t* @returns {PositiveNumber} pseudorandom number\n\t*\n\t* @example\n\t* var v = gamma2( 2.0, 4.0 );\n\t* // returns <number>\n\t*\n\t* @example\n\t* var v = gamma2( 3.0, 0.0 );\n\t* // returns NaN\n\t*\n\t* @example\n\t* var v = gamma2( 0.0, 2.0 );\n\t* // returns NaN\n\t*\n\t* @example\n\t* var v = gamma2( NaN, NaN );\n\t* // returns NaN\n\t*/\n\tfunction gamma2( alpha, beta ) {\n\t\tvar c;\n\t\tvar d;\n\t\tif (\n\t\t\tisnan( alpha ) ||\n\t\t\tisnan( beta ) ||\n\t\t\talpha <= 0.0 ||\n\t\t\tbeta <= 0.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( alpha < 1.0 ) {\n\t\t\td = alpha + 1.0 - ONE_THIRD;\n\t\t\tc = 1.0 / sqrt( 9.0*d );\n\t\t\treturn gamma0( rand, rnorm, beta, d, c ) * pow( rand(), 1.0/alpha );\n\t\t}\n\t\td = alpha - ONE_THIRD;\n\t\tc = 1.0 / sqrt( 9.0*d );\n\t\treturn gamma0( rand, rnorm, beta, d, c );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Gamma distributed pseudorandom numbers.\n*\n* @module @stdlib/random-base-gamma\n*\n* @example\n* var gamma = require( '@stdlib/random-base-gamma' );\n*\n* var v = gamma( 2.0, 3.0 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random-base-gamma' ).factory;\n*\n* var gamma = factory( 3.0, 2.0, {\n*     'seed': 297\n* });\n*\n* var v = gamma();\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar gamma = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( gamma, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = gamma;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a gamma distribution.\n*\n* ## References\n*\n* -   Marsaglia, George, and Wai Wan Tsang. 2000. \"A Simple Method for Generating Gamma Variables.\" _ACM Transactions on Mathematical Software_ 26 (3). New York, NY, USA: ACM: 363–72. doi:[10.1145/358407.358414](http://dx.doi.org/10.1145/358407.358414).\n*\n*\n* @name gamma\n* @type {PRNG}\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @returns {PositiveNumber} pseudorandom number\n*\n* @example\n* var v = gamma( 2.0, 4.0 );\n* // returns <number>\n*\n* @example\n* var v = gamma( -2.0, 4.0 );\n* // returns NaN\n*/\nvar gamma = factory();\n\n\n// EXPORTS //\n\nmodule.exports = gamma;\n"],"names":["isPositive","require$$0","isPrimitive","validate_1","alpha","beta","TypeError","ln","gamma_1","randu","randn","d","c","flg","x2","v0","v1","x","u","v","setReadOnly","setReadOnlyAccessor","require$$1","setReadWriteAccessor","require$$2","isObject","require$$3","isUint32Array","require$$4","isBoolean","require$$5","isFunction","require$$6","hasOwnProp","require$$7","constantFunction","require$$8","noop","require$$9","require$$10","factory","require$$11","isnan","require$$12","sqrt","require$$13","pow","require$$14","gcopy","require$$15","Uint32Array","require$$16","typedarray2json","require$$17","copy","require$$18","format","require$$19","validate","require$$20","gamma0","require$$21","ONE_THIRD","factory_1","STATE","rnorm","opts","rand","prng","FLG","err","arguments","length","state","gamma2","gamma1a","gamma1b","getSeed","getSeedLength","getState","setState","getStateLength","getStateSize","toJSON","normalized","seed","seedLength","stateLength","byteLength","s","out","name","NAME","params","NaN","gamma","lib"],"mappings":"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"}