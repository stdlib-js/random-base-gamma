// Copyright (c) 2024 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./index.d.ts" />
import t from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-property@v0.1.0-esm/index.mjs";import e from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-accessor@v0.1.0-esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-write-accessor@v0.1.1-esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-plain-object@v0.1.0-esm/index.mjs";import r from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-uint32array@v0.1.1-esm/index.mjs";import{isPrimitive as i}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-boolean@v0.1.1-esm/index.mjs";import o from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-function@v0.1.1-esm/index.mjs";import a from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-has-own-property@v0.1.1-esm/index.mjs";import m from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-constant-function@v0.1.1-esm/index.mjs";import d from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-noop@v0.1.1-esm/index.mjs";import{factory as p}from"https://cdn.jsdelivr.net/gh/stdlib-js/random-base-improved-ziggurat@v0.1.0-esm/index.mjs";import{factory as l}from"https://cdn.jsdelivr.net/gh/stdlib-js/random-base-mt19937@v0.1.0-esm/index.mjs";import u from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-assert-is-nan@v0.1.1-esm/index.mjs";import h from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-special-sqrt@v0.1.1-esm/index.mjs";import c from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-special-pow@v0.1.0-esm/index.mjs";import g from"https://cdn.jsdelivr.net/gh/stdlib-js/blas-base-gcopy@v0.1.0-esm/index.mjs";import j from"https://cdn.jsdelivr.net/gh/stdlib-js/array-uint32@v0.1.1-esm/index.mjs";import v from"https://cdn.jsdelivr.net/gh/stdlib-js/array-to-json@v0.1.0-esm/index.mjs";import f from"https://cdn.jsdelivr.net/gh/stdlib-js/object-assign@v0.1.0-esm/index.mjs";import b from"https://cdn.jsdelivr.net/gh/stdlib-js/string-format@v0.1.1-esm/index.mjs";import{isPrimitive as y}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-positive-number@v0.1.1-esm/index.mjs";import w from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-special-ln@v0.1.1-esm/index.mjs";function x(t,e){return y(t)?y(e)?null:new TypeError(b("invalid argument. Second argument must be a positive number. Value: `%s`.",e)):new TypeError(b("invalid argument. First argument must be a positive number. Value: `%s`.",t))}function E(t,e,s,n,r){var i,o,a,m,d,p,l;for(i=!0;i;){do{l=1+r*(d=e())}while(l<=0);a=1-.331*(o=d*d)*o,m=.5*o+n*(1-(l*=l*l)+w(l)),((p=t())<a||w(p)<m)&&(i=!1)}return 1/s*n*l}var T=1/3;function O(){var y,w,O,L,N,A,V,P,G,M,R;if(P=!0,0===arguments.length)A=l(N={copy:!1});else if(1===arguments.length){if(!n(N=arguments[0]))throw new TypeError(b("invalid argument. Options argument must be an object. Value: `%s`.",N));if(a(N,"copy")&&!i(N.copy))throw new TypeError(b("invalid option. `%s` option must be a boolean. Option: `%s`.","copy",N.copy));if(a(N,"prng")){if(!o(N.prng))throw new TypeError(b("invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.","prng",N.prng));A=N.prng}else{if(a(N,"state")&&!r(N.state))throw new TypeError(b("invalid option. `%s` option must be a Uint32Array. Option: `%s`.","state",N.state));!1===(N=f({},N)).copy?P=!1:N.state&&(N.state=g(N.state.length,N.state,1,new j(N.state.length),1)),N.copy=!1,A=l(N)}}else{if(G=x(w=arguments[0],L=arguments[1]))throw G;if(arguments.length>2){if(!n(N=arguments[2]))throw new TypeError(b("invalid argument. Options argument must be an object. Value: `%s`.",N));if(a(N,"copy")&&!i(N.copy))throw new TypeError(b("invalid option. `%s` option must be a boolean. Option: `%s`.","copy",N.copy));if(a(N,"prng")){if(!o(N.prng))throw new TypeError(b("invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.","prng",N.prng));A=N.prng}else{if(a(N,"state")&&!r(N.state))throw new TypeError(b("invalid option. `%s` option must be a Uint32Array. Option: `%s`.","state",N.state));!1===(N=f({},N)).copy?P=!1:N.state&&(N.state=g(N.state.length,N.state,1,new j(N.state.length),1)),N.copy=!1,A=l(N)}}else A=l(N={copy:!1})}return N&&N.prng?O=p({prng:N.prng}):(N.state?y=N.state:(y=A.state,A.state=y),O=p({state:y,copy:!1})),void 0===w?V=D:(w>=1?(V=B,R=w-T):(V=C,R=w+1-T),M=1/h(9*R)),t(V,"NAME","gamma"),N&&N.prng?(t(V,"seed",null),t(V,"seedLength",null),s(V,"state",m(null),d),t(V,"stateLength",null),t(V,"byteLength",null),t(V,"toJSON",m(null)),t(V,"PRNG",A)):(e(V,"seed",S),e(V,"seedLength",U),s(V,"state",q,F),e(V,"stateLength",z),e(V,"byteLength",J),t(V,"toJSON",k),t(V,"PRNG",A),A=A.normalized),V;function S(){return A.seed}function U(){return A.seedLength}function z(){return A.stateLength}function J(){return A.byteLength}function q(){return A.state}function F(t){if(!r(t))throw new TypeError(b("invalid argument. Must provide a Uint32Array. Value: `%s`.",t));P&&(t=g(t.length,t,1,new j(t.length),1)),A.state=t}function k(){var t={type:"PRNG"};return t.name=V.NAME,t.state=v(A.state),t.params=void 0===w?[]:[w,L],t}function B(){return E(A,O,L,R,M)}function C(){return E(A,O,L,R,M)*c(A(),1/w)}function D(t,e){var s,n;return u(t)||u(e)||t<=0||e<=0?NaN:t<1?(s=1/h(9*(n=t+1-T)),E(A,O,e,n,s)*c(A(),1/t)):(s=1/h(9*(n=t-T)),E(A,O,e,n,s))}}var L=O();t(L,"factory",O);export{L as default,O as factory};
//# sourceMappingURL=index.mjs.map
