/// <reference types="./index.d.ts" />
import t from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-property@esm/index.mjs";import e from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-accessor@esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-write-accessor@esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-plain-object@esm/index.mjs";import r from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-uint32array@esm/index.mjs";import i from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-boolean@esm/index.mjs";import o from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-function@esm/index.mjs";import a from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-has-own-property@esm/index.mjs";import m from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-constant-function@esm/index.mjs";import p from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-noop@esm/index.mjs";import d from"https://cdn.jsdelivr.net/gh/stdlib-js/random-base-improved-ziggurat@esm/index.mjs";import l from"https://cdn.jsdelivr.net/gh/stdlib-js/random-base-mt19937@esm/index.mjs";import u from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-assert-is-nan@esm/index.mjs";import h from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-special-sqrt@esm/index.mjs";import c from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-special-pow@esm/index.mjs";import j from"https://cdn.jsdelivr.net/gh/stdlib-js/blas-base-gcopy@esm/index.mjs";import g from"https://cdn.jsdelivr.net/gh/stdlib-js/array-uint32@esm/index.mjs";import f from"https://cdn.jsdelivr.net/gh/stdlib-js/array-to-json@esm/index.mjs";import b from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-copy@esm/index.mjs";import v from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-positive-number@esm/index.mjs";import y from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-special-ln@esm/index.mjs";var w=v.isPrimitive;var x=function(t,e){return w(t)?w(e)?null:new TypeError("invalid argument. `beta` must be a positive number. Value: `"+e+"`."):new TypeError("invalid argument. `alpha` must be a positive number. Value: `"+t+"`.")},E=y;var T=function(t,e,n,s,r){var i,o,a,m,p,d,l;for(i=!0;i;){do{l=1+r*(p=e())}while(l<=0);a=1-.331*(o=p*p)*o,m=.5*o+s*(1-(l*=l*l)+E(l)),((d=t())<a||E(d)<m)&&(i=!1)}return 1/n*s*l},O=t,L=e,N=n,A=s,P=r,V=i.isPrimitive,G=o,M=a,R=m,U=p,z=d.factory,J=l.factory,S=u,q=h,k=c,B=j,C=g,D=f,F=b,H=x,I=T,K=1/3;var Q=function(){var t,e,n,s,r,i,o,a,m,p,d;if(a=!0,0===arguments.length)i=J(r={copy:!1});else if(1===arguments.length){if(!A(r=arguments[0]))throw new TypeError("invalid argument. Options argument must be an object. Value: `"+r+"`.");if(M(r,"copy")&&!V(r.copy))throw new TypeError("invalid option. `copy` option must be a boolean. Option: `"+r.copy+"`.");if(M(r,"prng")){if(!G(r.prng))throw new TypeError("invalid option. `prng` option must be a pseudorandom number generator function. Option: `"+r.prng+"`.");i=r.prng}else{if(M(r,"state")&&!P(r.state))throw new TypeError("invalid option. `state` option must be a Uint32Array. Option: `"+r.state+"`.");!1===(r=F(r,1)).copy?a=!1:r.state&&(r.state=B(r.state.length,r.state,1,new C(r.state.length),1)),r.copy=!1,i=J(r)}}else{if(m=H(e=arguments[0],s=arguments[1]))throw m;if(arguments.length>2){if(!A(r=arguments[2]))throw new TypeError("invalid argument. Options argument must be an object. Value: `"+r+"`.");if(M(r,"copy")&&!V(r.copy))throw new TypeError("invalid option. `copy` option must be a boolean. Option: `"+r.copy+"`.");if(M(r,"prng")){if(!G(r.prng))throw new TypeError("invalid option. `prng` option must be a pseudorandom number generator function. Option: `"+r.prng+"`.");i=r.prng}else{if(M(r,"state")&&!P(r.state))throw new TypeError("invalid option. `state` option must be a Uint32Array. Option: `"+r.state+"`.");!1===(r=F(r,1)).copy?a=!1:r.state&&(r.state=B(r.state.length,r.state,1,new C(r.state.length),1)),r.copy=!1,i=J(r)}}else i=J(r={copy:!1})}return r&&r.prng?n=z({prng:r.prng}):(r.state?t=r.state:(t=i.state,i.state=t),n=z({state:t,copy:!1})),void 0===e?o=y:(e>=1?(o=b,d=e-K):(o=v,d=e+1-K),p=1/q(9*d)),O(o,"NAME","gamma"),r&&r.prng?(O(o,"seed",null),O(o,"seedLength",null),N(o,"state",R(null),U),O(o,"stateLength",null),O(o,"byteLength",null),O(o,"toJSON",R(null)),O(o,"PRNG",i)):(L(o,"seed",l),L(o,"seedLength",u),N(o,"state",j,g),L(o,"stateLength",h),L(o,"byteLength",c),O(o,"toJSON",f),O(o,"PRNG",i),i=i.normalized),o;function l(){return i.seed}function u(){return i.seedLength}function h(){return i.stateLength}function c(){return i.byteLength}function j(){return i.state}function g(t){if(!P(t))throw new TypeError("invalid argument. Must provide a Uint32Array. Value: `"+t+"`.");a&&(t=B(t.length,t,1,new C(t.length),1)),i.state=t}function f(){var t={type:"PRNG"};return t.name=o.NAME,t.state=D(i.state),t.params=void 0===e?[]:[e,s],t}function b(){return I(i,n,s,d,p)}function v(){return I(i,n,s,d,p)*k(i(),1/e)}function y(t,e){var s,r;return S(t)||S(e)||t<=0||e<=0?NaN:t<1?(s=1/q(9*(r=t+1-K)),I(i,n,e,r,s)*k(i(),1/t)):(s=1/q(9*(r=t-K)),I(i,n,e,r,s))}},W=Q();t(W,"factory",Q);var X=W;export{X as default};
//# sourceMappingURL=index.mjs.map
